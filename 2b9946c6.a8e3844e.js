(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{179:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),l=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=l.a.createContext({}),o=function(e){var t=l.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=o(e.components);return l.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},u=l.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),p=o(n),u=r,f=p["".concat(s,".").concat(u)]||p[u]||d[u]||a;return n?l.a.createElement(f,c(c({ref:t},i),{},{components:n})):l.a.createElement(f,c({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var i=2;i<a;i++)s[i]=n[i];return l.a.createElement.apply(null,s)}return l.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return o}));var r=n(3),l=n(7),a=(n(0),n(179)),s={id:"data_structures5",title:"\ud2b8\ub9ac",sidebar_label:"\ud2b8\ub9ac"},c={unversionedId:"kdt/data_structures/data_structures5",id:"kdt/data_structures/data_structures5",isDocsHomePage:!1,title:"\ud2b8\ub9ac",description:"\ud83d\udca1 \u300eKDT \ud504\ub85c\uadf8\ub798\uba38\uc2a4 \uc778\uacf5\uc9c0\ub2a5 \ub370\ube0c\ucf54\uc2a4\u300f\uc5d0\uc11c \uacf5\ubd80\uc911..\ud83d\udc40",source:"@site/docs\\kdt\\data_structures\\data_structures5.md",slug:"/kdt/data_structures/data_structures5",permalink:"/willbe/docs/kdt/data_structures/data_structures5",version:"current",sidebar_label:"\ud2b8\ub9ac",sidebar:"kdt",previous:{title:"\ud050",permalink:"/willbe/docs/kdt/data_structures/data_structures4"},next:{title:"\ud799",permalink:"/willbe/docs/kdt/data_structures/data_structures6"}},b=[{value:"1. \ud2b8\ub9ac (Trees)",id:"1-\ud2b8\ub9ac-trees",children:[{value:"\uc6a9\uc5b4 \uc815\ub9ac",id:"\uc6a9\uc5b4-\uc815\ub9ac",children:[]},{value:"\ubd80\ubaa8 (Parent) \ub178\ub4dc\uc640 \uc790\uc2dd (Child) \ub178\ub4dc",id:"\ubd80\ubaa8-parent-\ub178\ub4dc\uc640-\uc790\uc2dd-child-\ub178\ub4dc",children:[]},{value:"\ub178\ub4dc\uc758 \uc218\uc900 (Level)",id:"\ub178\ub4dc\uc758-\uc218\uc900-level",children:[]},{value:"\ud2b8\ub9ac\uc758 \ub192\uc774 (Height)",id:"\ud2b8\ub9ac\uc758-\ub192\uc774-height",children:[]},{value:"\ubd80\ubd84 \ud2b8\ub9ac (\uc11c\ube0c \ud2b8\ub9ac, Subtree)",id:"\ubd80\ubd84-\ud2b8\ub9ac-\uc11c\ube0c-\ud2b8\ub9ac-subtree",children:[]},{value:"\ub178\ub4dc\uc758 \ucc28\uc218 (Degree)",id:"\ub178\ub4dc\uc758-\ucc28\uc218-degree",children:[]}]},{value:"2. \uc774\uc9c4 \ud2b8\ub9ac (Binary Tree)",id:"2-\uc774\uc9c4-\ud2b8\ub9ac-binary-tree",children:[{value:"\ud3ec\ud654 \uc774\uc9c4 \ud2b8\ub9ac (Full Binary Tree)",id:"\ud3ec\ud654-\uc774\uc9c4-\ud2b8\ub9ac-full-binary-tree",children:[]},{value:"\uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac (Complete Binary Tree)",id:"\uc644\uc804-\uc774\uc9c4-\ud2b8\ub9ac-complete-binary-tree",children:[]}]},{value:"\uc774\uc9c4 \ud2b8\ub9ac\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870",id:"\uc774\uc9c4-\ud2b8\ub9ac\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870",children:[{value:"\uc5f0\uc0b0 \uc815\uc758",id:"\uc5f0\uc0b0-\uc815\uc758",children:[]}]},{value:"\uc774\uc9c4 \ud2b8\ub9ac\uc758 \uad6c\ud604",id:"\uc774\uc9c4-\ud2b8\ub9ac\uc758-\uad6c\ud604",children:[{value:"1. \ud074\ub798\uc2a4 \uc0dd\uc131: Node, Tree",id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-node-tree",children:[]},{value:"2. \ub178\ub4dc\uc758 \uc218: size()",id:"2-\ub178\ub4dc\uc758-\uc218-size",children:[]},{value:"3. \ud2b8\ub9ac\uc758 \uae4a\uc774: depth()",id:"3-\ud2b8\ub9ac\uc758-\uae4a\uc774-depth",children:[]},{value:"4. \uc21c\ud68c (traversal)",id:"4-\uc21c\ud68c-traversal",children:[]}]},{value:"3. \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac (Binary Search Trees)",id:"3-\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac-binary-search-trees",children:[{value:"\uc815\ub82c\ub41c \ubc30\uc5f4\uc744 \uc774\uc6a9\ud55c \uc774\uc9c4 \ud0d0\uc0c9\uacfc\uc758 \ube44\uad50",id:"\uc815\ub82c\ub41c-\ubc30\uc5f4\uc744-\uc774\uc6a9\ud55c-\uc774\uc9c4-\ud0d0\uc0c9\uacfc\uc758-\ube44\uad50",children:[]},{value:"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uac00 \ubcc4\ub85c \ud6a8\uc728\uc801\uc774\uc9c0 \ubabb\ud55c \uacbd\uc6b0",id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uac00-\ubcc4\ub85c-\ud6a8\uc728\uc801\uc774\uc9c0-\ubabb\ud55c-\uacbd\uc6b0",children:[]},{value:"\ubcf4\ub2e4 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\ub4e4",id:"\ubcf4\ub2e4-\ub098\uc740-\uc131\ub2a5\uc744-\ubcf4\uc774\ub294-\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\ub4e4",children:[]}]},{value:"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870",id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870",children:[{value:"\ub370\uc774\ud130 \ud45c\ud604",id:"\ub370\uc774\ud130-\ud45c\ud604",children:[]},{value:"\uc5f0\uc0b0 \uc815\uc758",id:"\uc5f0\uc0b0-\uc815\uc758-1",children:[]}]},{value:"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc758 \uad6c\ud604",id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc758-\uad6c\ud604",children:[{value:"1. \ud074\ub798\uc2a4 \uc0dd\uc131: Node, BinSearchTree",id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-node-binsearchtree",children:[]},{value:"2. \ub370\uc774\ud130 \uc6d0\uc18c \ub098\uc5f4: inorder()",id:"2-\ub370\uc774\ud130-\uc6d0\uc18c-\ub098\uc5f4-inorder",children:[]},{value:"3. \ucd5c\uc18c \ud0a4\uc758 \uc6d0\uc18c \ud0d0\uc0c9: min()",id:"3-\ucd5c\uc18c-\ud0a4\uc758-\uc6d0\uc18c-\ud0d0\uc0c9-min",children:[]},{value:"4. \ucd5c\ub300 \ud0a4\uc758 \uc6d0\uc18c \ud0d0\uc0c9: max()",id:"4-\ucd5c\ub300-\ud0a4\uc758-\uc6d0\uc18c-\ud0d0\uc0c9-max",children:[]},{value:"5. \ud2b9\uc815 \uc6d0\uc18c \uac80\uc0c9: lookup()",id:"5-\ud2b9\uc815-\uc6d0\uc18c-\uac80\uc0c9-lookup",children:[]},{value:"6. \ub370\uc774\ud130 \uc6d0\uc18c \ucd94\uac00: insert()",id:"6-\ub370\uc774\ud130-\uc6d0\uc18c-\ucd94\uac00-insert",children:[]},{value:"7. \ud2b9\uc815 \uc6d0\uc18c \uc0ad\uc81c: remove()",id:"7-\ud2b9\uc815-\uc6d0\uc18c-\uc0ad\uc81c-remove",children:[]}]},{value:"4. \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 (BFS, Breadth-First Search)",id:"4-\ub108\ube44-\uc6b0\uc120-\ud0d0\uc0c9-bfs-breadth-first-search",children:[]},{value:"5. \uae4a\uc774 \uc6b0\uc120 \ud0d0\uc0c9 (DFS, Depth-First Search)",id:"5-\uae4a\uc774-\uc6b0\uc120-\ud0d0\uc0c9-dfs-depth-first-search",children:[{value:"\uc5f0\uc2b5\ubb38\uc81c - \uc5ec\ud589\uacbd\ub85c",id:"\uc5f0\uc2b5\ubb38\uc81c---\uc5ec\ud589\uacbd\ub85c",children:[]}]}],i={toc:b};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"\ud83d\udca1 \u300eKDT \ud504\ub85c\uadf8\ub798\uba38\uc2a4 \uc778\uacf5\uc9c0\ub2a5 \ub370\ube0c\ucf54\uc2a4\u300f\uc5d0\uc11c \uacf5\ubd80\uc911..\ud83d\udc40"),Object(a.b)("h2",{id:"1-\ud2b8\ub9ac-trees"},"1. \ud2b8\ub9ac (Trees)"),Object(a.b)("p",null,"\uc815\uc810(node)\uc640 \uac04\uc120(edge)\uc744 \uc774\uc6a9\ud558\uc5ec \ub370\uc774\ud130\uc758 \ubc30\uce58 \ud615\ud0dc\ub97c \ucd94\uc0c1\ud654\ud55c \uc790\ub8cc \uad6c\uc870  "),Object(a.b)("h3",{id:"\uc6a9\uc5b4-\uc815\ub9ac"},"\uc6a9\uc5b4 \uc815\ub9ac"),Object(a.b)("p",null,"\uadf8\ub798\ud504 (graphs)",Object(a.b)("br",{parentName:"p"}),"\n","\uc815\uc810 (vetex, node), \uac04\uc120 (edge, link)",Object(a.b)("br",{parentName:"p"}),"\n","\uc720\ud5a5 (directed) \uadf8\ub798\ud504, \ubb34\ud5a5 (undirected) \uadf8\ub798\ud504"),Object(a.b)("p",null,"\uc2a4\ud0dd (stack)",Object(a.b)("br",{parentName:"p"}),"\n","\ud050 (queue)  "),Object(a.b)("h3",{id:"\ubd80\ubaa8-parent-\ub178\ub4dc\uc640-\uc790\uc2dd-child-\ub178\ub4dc"},"\ubd80\ubaa8 (Parent) \ub178\ub4dc\uc640 \uc790\uc2dd (Child) \ub178\ub4dc"),Object(a.b)("p",null,"\uac04\uc120\uc73c\ub85c \uc5f0\uacb0\ub41c \ub450 \uac1c\uc758 \ub178\ub4dc \uc911 root \ucabd\uc5d0 \uac00\uae4c\uc6b4 \ub178\ub4dc\ub97c \ubd80\ubaa8 \ub178\ub4dc, leaf \ucabd\uc5d0 \uac00\uae4c\uc6b4 \ub178\ub4dc\ub97c \uc790\uc2dd \ub178\ub4dc\ub77c\uace0 \ud558\uba70, \uac19\uc740 \ubd80\ubaa8 \ub178\ub4dc \uc544\ub798\uc5d0 \ub2ec\ub824 \uc788\ub294 \uc790\uc2dd \ub178\ub4dc\ub4e4\uc744 \ud615\uc81c (sibling) \ub178\ub4dc\ub77c\uace0 \ud55c\ub2e4.  "),Object(a.b)("p",null,"\ud55c \ub178\ub4dc\uac00 root \ucabd\uc73c\ub85c \uc62c\ub77c\uac00\uba74\uc11c \ub9cc\ub098\ub294 \ubaa8\ub4e0 \ub178\ub4dc\ub294 \uc870\uc0c1 (ancestor) \ub178\ub4dc, leaf \ucabd\uc73c\ub85c \ub0b4\ub824\uac00\uba74\uc11c \ub9cc\ub098\ub294 \ubaa8\ub4e0 \ub178\ub4dc\ub294 \ud6c4\uc190 (descendant) \ub178\ub4dc\ub77c\uace0 \ud55c\ub2e4.  "),Object(a.b)("h3",{id:"\ub178\ub4dc\uc758-\uc218\uc900-level"},"\ub178\ub4dc\uc758 \uc218\uc900 (Level)"),Object(a.b)("p",null,"root \ub178\ub4dc\uc758 level\uc740 0\uc774\uba70, \uc544\ub798\ub85c \ub0b4\ub824\uac08 \uc218\ub85d \ub808\ubca8\uc774 \uc62c\ub77c\uac10  "),Object(a.b)("h3",{id:"\ud2b8\ub9ac\uc758-\ub192\uc774-height"},"\ud2b8\ub9ac\uc758 \ub192\uc774 (Height)"),Object(a.b)("p",null,"= \ud2b8\ub9ac\uc758 \uae4a\uc774 (Depth)",Object(a.b)("br",{parentName:"p"}),"\n","\ud2b8\ub9ac\uc758 \ub192\uc774 (height)  = \ucd5c\ub300 \uc218\uc900 (level) + 1  "),Object(a.b)("h3",{id:"\ubd80\ubd84-\ud2b8\ub9ac-\uc11c\ube0c-\ud2b8\ub9ac-subtree"},"\ubd80\ubd84 \ud2b8\ub9ac (\uc11c\ube0c \ud2b8\ub9ac, Subtree)"),Object(a.b)("p",null,"\uc5b4\ub5a4 \ub178\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \uadf8 \ub178\ub4dc\uc640 \ud558\uc704 \ub178\ub4dc\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ud2b8\ub9ac  "),Object(a.b)("h3",{id:"\ub178\ub4dc\uc758-\ucc28\uc218-degree"},"\ub178\ub4dc\uc758 \ucc28\uc218 (Degree)"),Object(a.b)("p",null,"= \uac01 \ub178\ub4dc\uc758 \uc790\uc2dd (\uc11c\ube0c\ud2b8\ub9ac)\uc758 \uc218  "),Object(a.b)("h2",{id:"2-\uc774\uc9c4-\ud2b8\ub9ac-binary-tree"},"2. \uc774\uc9c4 \ud2b8\ub9ac (Binary Tree)"),Object(a.b)("p",null,"\ubaa8\ub4e0 \ub178\ub4dc\uc758 \ucc28\uc218\uac00 2 \uc774\ud558\uc778 \ud2b8\ub9ac  "),Object(a.b)("p",null,"\uc774\uc9c4 \ud2b8\ub9ac\ub294 \ub8e8\ud2b8 \ub178\ub4dc + \uc67c\ucabd \uc11c\ube0c\ud2b8\ub9ac + \uc624\ub978\ucabd \uc11c\ube0c\ud2b8\ub9ac\ub85c \uc774\ub8e8\uc5b4\uc9c0\uba70, \uc774\ub54c, \uc11c\ube0c\ud2b8\ub9ac\ub4e4\uc774 \ubaa8\ub450 \uc774\uc9c4 \ud2b8\ub9ac\uc774\uac70\ub098 \ube48 \ud2b8\ub9ac (empty tree)\uc778 \uacbd\uc6b0 \uc774\uc9c4 \ud2b8\ub9ac\ub97c ",Object(a.b)("strong",{parentName:"p"},"\uc7ac\uadc0\uc801\uc73c\ub85c")," \uc815\uc758\ud560 \uc218 \uc788\ub2e4.  "),Object(a.b)("h3",{id:"\ud3ec\ud654-\uc774\uc9c4-\ud2b8\ub9ac-full-binary-tree"},"\ud3ec\ud654 \uc774\uc9c4 \ud2b8\ub9ac (Full Binary Tree)"),Object(a.b)("p",null,"\ubaa8\ub4e0 \ub808\ubca8\uc5d0\uc11c \ub178\ub4dc\ub4e4\uc774 \ubaa8\ub450 \ucc44\uc6cc\uc838 \uc788\ub294 \uc774\uc9c4 \ud2b8\ub9ac",Object(a.b)("br",{parentName:"p"}),"\n","\ub192\uc774\uac00 k\uc774\uace0 \ub178\ub4dc\uc758 \uac1c\uc218\uac00 (2^k - 1)\uc778 \uc774\uc9c4 \ud2b8\ub9ac  "),Object(a.b)("h3",{id:"\uc644\uc804-\uc774\uc9c4-\ud2b8\ub9ac-complete-binary-tree"},"\uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac (Complete Binary Tree)"),Object(a.b)("p",null,"\ub192\uc774\uac00 k\uc778 \uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac\ub294 \ub808\ubca8 k - 2 \uae4c\uc9c0\ub294 \ubaa8\ub4e0 \ub178\ub4dc\uac00 2\uac1c\uc758 \uc790\uc2dd\uc744 \uac00\uc9c4 \ud3ec\ud654 \uc774\uc9c4 \ud2b8\ub9ac \ud615\ud0dc\uc774\uba70, \ub808\ubca8 k - 1\uc5d0\uc11c\ub294 \uc67c\ucabd\ubd80\ud130 \ub178\ub4dc\uac00 \uc21c\ucc28\uc801\uc73c\ub85c \ucc44\uc6cc\uc838 \uc788\ub294 \uc774\uc9c4 \ud2b8\ub9ac\ub97c \ub9d0\ud55c\ub2e4.  "),Object(a.b)("h2",{id:"\uc774\uc9c4-\ud2b8\ub9ac\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870"},"\uc774\uc9c4 \ud2b8\ub9ac\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870"),Object(a.b)("h3",{id:"\uc5f0\uc0b0-\uc815\uc758"},"\uc5f0\uc0b0 \uc815\uc758"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"\ub178\ub4dc\uc758 \uc218: size()",Object(a.b)("br",{parentName:"li"}),"\ud604\uc7ac \ud2b8\ub9ac\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \ub178\ub4dc\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ud2b8\ub9ac\uc758 \uae4a\uc774: depth()",Object(a.b)("br",{parentName:"li"}),"\ud604\uc7ac \ud2b8\ub9ac\uc758 \uae4a\uc774 (\ub610\ub294 \ub192\uc774) \ub97c \uad6c\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\uc21c\ud68c (traversal)",Object(a.b)("br",{parentName:"li"}),"\uc815\ud574\uc9c4 \uc21c\uc11c\uc5d0 \ub530\ub77c \ub178\ub4dc\ub4e4\uc744 \uc21c\ud68c\ud55c\ub2e4.  ")),Object(a.b)("h2",{id:"\uc774\uc9c4-\ud2b8\ub9ac\uc758-\uad6c\ud604"},"\uc774\uc9c4 \ud2b8\ub9ac\uc758 \uad6c\ud604"),Object(a.b)("h3",{id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-node-tree"},"1. \ud074\ub798\uc2a4 \uc0dd\uc131: Node, Tree"),Object(a.b)("p",null,"\ub178\ub4dc\uc5d0\ub294 \ub370\uc774\ud130\uc640 left child, right child\uac00 \uc788\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, item):\n        self.data = item\n        self.left = None\n        self.right = None\n")),Object(a.b)("p",null,"root \ub178\ub4dc\ub9cc \uac00\ub9ac\ud0a8\ub2e4\uba74 left child\uc640 right child\ub294 \uac04\uc120\uc73c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub450 \ucc3e\uc544\uac08 \uc218 \uc788\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def __init__(self, r):\n        self.root = r\n")),Object(a.b)("h3",{id:"2-\ub178\ub4dc\uc758-\uc218-size"},"2. \ub178\ub4dc\uc758 \uc218: size()"),Object(a.b)("p",null,"\ud2b8\ub9ac\ub294 \uc815\uc758 \ubd80\ud130 \uc7ac\uadc0\uc801\uc774\uae30 \ub54c\ubb38\uc5d0 \ub178\ub4dc\uc758 \uc218 \ub610\ud55c \uc7ac\uadc0\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4.  "),Object(a.b)("p",null,"\uac01\uac01\uc758 \ub178\ub4dc\ub97c root\ub85c \ud558\ub294 \uc11c\ube0c\ud2b8\ub9ac\uc758 size\ub3c4 \uad6c\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 BinaryTree \ud074\ub798\uc2a4\uc758 \uba54\uc11c\ub4dc \ubfd0\ub9cc \uc544\ub2c8\ub77c Node \ud074\ub798\uc2a4\uc5d0\uc11c \ubd24\uc744 \ub54c \uc790\uae30 \uc790\uc2e0\uc774 root\uc778 \uc11c\ube0c\ud2b8\ub9ac\uc758 \uc0ac\uc774\uc988\ub97c \uad6c\ud558\ub294 \uba64\ubc84 \uba54\uc11c\ub4dc\ub3c4 \uc81c\uacf5\ud574\uc57c \ud55c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def size(self):\n        # \uc67c\ucabd \uc11c\ube0c\ud2b8\ub9ac\uc758 size\n        l = self.left.size() if self.left else 0\n        # \uc624\ub978\ucabd \uc11c\ube0c\ud2b8\ub9ac\uc758 size\n        r = self.right.size() if self.right else 0\n        # \uc804\uccb4 size \ub9ac\ud134\n        return l + r + 1\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def size(self):\n        # \ube48 \ud2b8\ub9ac\uc778\uc9c0 \ud310\ubcc4\n        if self.root:\n            return self.root.size()\n        else:\n            return 0\n")),Object(a.b)("h3",{id:"3-\ud2b8\ub9ac\uc758-\uae4a\uc774-depth"},"3. \ud2b8\ub9ac\uc758 \uae4a\uc774: depth()"),Object(a.b)("p",null,"\ub9c8\ucc2c\uac00\uc9c0\ub85c \uc7ac\uadc0\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def depth(self):\n        l = self.left.depth() if self.left else 0\n        r = self.right.depth() if self.right else 0\n        return max(l, r) + 1\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def depth(self):\n        if self.root:\n            return self.root.depth()\n        else:\n            return []\n")),Object(a.b)("h3",{id:"4-\uc21c\ud68c-traversal"},"4. \uc21c\ud68c (traversal)"),Object(a.b)("h4",{id:"\uae4a\uc774-\uc6b0\uc120-\uc21c\ud68c-depth-first-traversal"},"\uae4a\uc774 \uc6b0\uc120 \uc21c\ud68c (Depth First Traversal)"),Object(a.b)("p",null,"\uc911\uc704 \uc21c\ud68c (in-order traversal): left subtree -> \uc790\uae30 \uc790\uc2e0 -> right subtree \uc21c\uc73c\ub85c \uc21c\ud68c\ud55c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def inorder(self):\n        traversal = []\n        # \uc67c\ucabd \uc11c\ube0c\ud2b8\ub9ac\uac00 \uc788\ub2e4\uba74 \ucd94\uac00\n        if self.left:\n            traversal += self.left.inorder()\n        # \uc790\uae30 \uc790\uc2e0 \ucd94\uac00\n        traversal.append(self.data)\n        # \uc624\ub978\ucabd \uc11c\ube0c\ud2b8\ub9ac\uac00 \uc788\ub2e4\uba74 \ucd94\uac00\n        if self.right:\n            traversal += self.right.inorder()\n        return traversal\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def inorder(self):\n        if self.root:\n            return self.root.inorder()\n        else:\n            return []\n")),Object(a.b)("p",null,"\uc804\uc704 \uc21c\ud68c (pre-order traversal): \uc790\uae30 \uc790\uc2e0 -> left subtree -> right subtree \uc21c\uc73c\ub85c \uc21c\ud68c\ud55c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def preorder(self):\n        traversal = [self.data]\n        if self.left:\n            traversal += self.left.preorder()\n        if self.right:\n            traversal += self.right.preorder()\n        return traversal\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def preorder(self):\n        if self.root:\n            return self.root.preorder()\n        else:\n            return []\n")),Object(a.b)("p",null,"\ud6c4\uc704 \uc21c\ud68c (post-order traversal): left subtree -> right subtree -> \uc790\uae30 \uc790\uc2e0 \uc21c\uc73c\ub85c \uc21c\ud68c\ud55c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def postorder(self):\n        traversal = []\n        if self.left:\n            traversal += self.left.postorder()\n        if self.right:\n            traversal += self.right.postorder()\n        traversal.append(self.data)\n        return traversal\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def postorder(self):\n        if self.root:\n            return self.root.traversal\n        else:\n            return 0\n")),Object(a.b)("h4",{id:"\ub113\uc774-\uc6b0\uc120-\uc21c\ud68c-breadth-first-traversal"},"\ub113\uc774 \uc6b0\uc120 \uc21c\ud68c (Breadth First Traversal)"),Object(a.b)("p",null,"\uc218\uc900(level)\uc774 \ub0ae\uc740 \ub178\ub4dc\ub97c \uc6b0\uc120\uc73c\ub85c \ubc29\ubb38\ud558\uba70, \uac19\uc740 \uc218\uc900\uc758 \ub178\ub4dc\ub4e4 \uc0ac\uc774\uc5d0\ub294 \ubd80\ubaa8 \ub178\ub4dc\uc758 \ubc29\ubb38 \uc21c\uc11c\uc5d0 \ub530\ub77c \uc67c\ucabd \uc790\uc2dd \ub178\ub4dc\ub97c \uc624\ub978\ucabd \uc790\uc2dd \ub178\ub4dc\ubcf4\ub2e4 \uba3c\uc800 \ubc29\ubb38\ud55c\ub2e4.  "),Object(a.b)("p",null,"\ud55c \ub178\ub4dc\ub97c \ubc29\ubb38\ud588\uc744 \ub54c, \ub098\uc911\uc5d0 \ubc29\ubb38\ud560 \ub178\ub4dc\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uae30\ub85d\ud574 \ub450\uc5b4\uc57c \ud558\ub294\ub370 \uc774\ub54c \ud050(queue)\ub97c \uc774\uc6a9\ud55c\ub2e4."),Object(a.b)("p",null,"\ub113\uc774 \uc6b0\uc120 \uc21c\ud68c\ub294 \uc7ac\uadc0\uc801\uc778 \ubc29\ubc95\uc774 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4. \ub530\ub77c\uc11c BinaryTree\uc5d0 \uad6c\ud604\ud558\uba74 \ub41c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinaryTree:\n    def bfs(self):\n        # \ucd08\uae30\ud654\n        traversal = []\n        q = ArrayQueue()\n        # \ube48 \ud2b8\ub9ac\uac00 \uc544\ub2c8\uba74 root node\ub97c \ud050\uc5d0 \ucd94\uac00 (enqueue)\n        if self.root:\n            q.enqueue(self.root)\n        # q\uac00 \ube44\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ub3d9\uc548\n        while q:\n            # q\uc5d0\uc11c \uc6d0\uc18c \ucd94\ucd9c\n            node = q.dequeue()\n            # node \ubc29\ubb38\n            traversal.append(node.data)\n            # q\uc5d0 \uc790\uc2dd \ub178\ub4dc \ucd94\uac00\n            if node.left:\n                q.enqueue(node.left)\n            if node.right:\n                q.enqueue(node.right)\n        return traversal\n")),Object(a.b)("h2",{id:"3-\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac-binary-search-trees"},"3. \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac (Binary Search Trees)"),Object(a.b)("p",null,"\ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \ub300\ud574\uc11c,",Object(a.b)("br",{parentName:"p"}),"\n","\uc67c\ucabd \uc11c\ube0c\ud2b8\ub9ac\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub294 \ubaa8\ub450 \ud604\uc7ac \ub178\ub4dc\uc758 \uac12\ubcf4\ub2e4 \uc791\uace0",Object(a.b)("br",{parentName:"p"}),"\n","\uc624\ub978\ucabd \uc11c\ube0c\ud2b8\ub9ac\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub294 \ubaa8\ub450 \ud604\uc7ac \ub178\ub4dc\uc758 \uac12\ubcf4\ub2e4 \ud070",Object(a.b)("br",{parentName:"p"}),"\n","\uc131\uc9c8\uc744 \ub9cc\uc871\ud558\ub294 \uc774\uc9c4 \ud2b8\ub9ac  "),Object(a.b)("p",null,"(\uc5ec\uae30\uc11c \uc911\ubcf5\ub418\ub294 \ub370\uc774\ud130 \uc6d0\uc18c\ub294 \uc5c6\ub294 \uac83\uc73c\ub85c \uac00\uc815\ud55c\ub2e4.)  "),Object(a.b)("h3",{id:"\uc815\ub82c\ub41c-\ubc30\uc5f4\uc744-\uc774\uc6a9\ud55c-\uc774\uc9c4-\ud0d0\uc0c9\uacfc\uc758-\ube44\uad50"},"\uc815\ub82c\ub41c \ubc30\uc5f4\uc744 \uc774\uc6a9\ud55c \uc774\uc9c4 \ud0d0\uc0c9\uacfc\uc758 \ube44\uad50"),Object(a.b)("p",null,"\uc7a5\uc810: \ub370\uc774\ud130\uc758 \uc6d0\uc18c\ub97c \ucd94\uac00\ud558\uac70\ub098 \uc0ad\uc81c\ud558\ub294 \uac83\uc774 \uc6a9\uc774\ud558\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\ub2e8\uc810: \uacf5\uac04 \uc18c\uc694\uac00 \ud06c\ub2e4. (\uc2dc\uac04 \ubcf5\uc7a1\ub3c4\uac00 O(log n)\ubcf4\ub2e4 \ucee4\uc9c0\ub294 \uacbd\uc6b0\uac00 \uc788\uc74c)  "),Object(a.b)("h3",{id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uac00-\ubcc4\ub85c-\ud6a8\uc728\uc801\uc774\uc9c0-\ubabb\ud55c-\uacbd\uc6b0"},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uac00 \ubcc4\ub85c \ud6a8\uc728\uc801\uc774\uc9c0 \ubabb\ud55c \uacbd\uc6b0"),Object(a.b)("p",null,"ex) 1, 2, 3, 4\uac00 \uc21c\uc11c\ub300\ub85c \uc785\ub825\ub41c\ub2e4\uba74, \ud55c \ucabd\uc73c\ub85c \uc644\uc804\ud788 \uce58\uc6b0\uce5c \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uac00 \ub418\uba70, \uc5ec\uae30\uc11c 4\ub97c \ucc3e\uac8c \ub418\ub294 \uacbd\uc6b0 \uc120\ud615 \ud0d0\uc0c9\uacfc \ub3d9\ub4f1\ud55c \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\ub97c \uac00\uc9c0\uac8c \ub41c\ub2e4.  "),Object(a.b)("h3",{id:"\ubcf4\ub2e4-\ub098\uc740-\uc131\ub2a5\uc744-\ubcf4\uc774\ub294-\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\ub4e4"},"\ubcf4\ub2e4 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc774\ub294 \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\ub4e4"),Object(a.b)("p",null,"\ub192\uc774\uc758 \uade0\ud615\uc744 \uc720\uc9c0\ud568\uc73c\ub85c\uc368 O(log n)\uc758 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub97c \ubcf4\uc7a5\ud55c\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\ub300\uc2e0 \uc0bd\uc785\uacfc \uc0ad\uc81c \uc5f0\uc0b0\uc774 \ubcf5\uc7a1\ud558\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4.  "),Object(a.b)("p",null,"ex) ",Object(a.b)("a",{parentName:"p",href:"https://ko.wikipedia.org/wiki/AVL_%ED%8A%B8%EB%A6%AC"},"AVL tree"),", ",Object(a.b)("a",{parentName:"p",href:"https://ko.wikipedia.org/wiki/%EB%A0%88%EB%93%9C-%EB%B8%94%EB%9E%99_%ED%8A%B8%EB%A6%AC"},"Red-black tree")),Object(a.b)("h2",{id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870"},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870"),Object(a.b)("h3",{id:"\ub370\uc774\ud130-\ud45c\ud604"},"\ub370\uc774\ud130 \ud45c\ud604"),Object(a.b)("p",null,"\uac01 \ub178\ub4dc\ub294 (key, value)\uc758 \uc30d\uc73c\ub85c \ud45c\ud604\ud55c\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\ud0a4\ub97c \uc774\uc6a9\ud558\uc5ec \uac80\uc0c9\ud560 \uc218 \uc788\uc73c\uba70 \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ub808\ucf54\ub4dc\ub85c \ud655\uc7a5\ud560 \uc218 \uc788\ub2e4.  "),Object(a.b)("h3",{id:"\uc5f0\uc0b0-\uc815\uc758-1"},"\uc5f0\uc0b0 \uc815\uc758"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"\ub370\uc774\ud130 \uc6d0\uc18c \ucd94\uac00: insert()",Object(a.b)("br",{parentName:"li"}),"\ud2b8\ub9ac\uc5d0 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130 \uc6d0\uc18c\ub97c \ucd94\uac00\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ud2b9\uc815 \uc6d0\uc18c \uc0ad\uc81c: remove()",Object(a.b)("br",{parentName:"li"}),"\ud0a4\ub97c \uae30\uc900\uc73c\ub85c \ud2b9\uc815 \uc6d0\uc18c\ub97c \uc0ad\uc81c\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ud2b9\uc815 \uc6d0\uc18c \uac80\uc0c9: lookup()",Object(a.b)("br",{parentName:"li"}),"\ud0a4\ub97c \uae30\uc900\uc73c\ub85c \ud2b9\uc815 \uc6d0\uc18c\ub97c \uac80\uc0c9\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ub370\uc774\ud130 \uc6d0\uc18c \ub098\uc5f4: inorder()",Object(a.b)("br",{parentName:"li"}),"\ud0a4\uc758 \uc21c\uc11c\ub300\ub85c \ub370\uc774\ud130 \uc6d0\uc18c\ub97c \ub098\uc5f4\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ucd5c\uc18c \ud0a4, \ucd5c\ub300 \ud0a4\uc758 \uc6d0\uc18c \ud0d0\uc0c9: min(), max()",Object(a.b)("br",{parentName:"li"}),"\ucd5c\uc18c \ud0a4, \ucd5c\ub300 \ud0a4\ub97c \uac00\uc9c0\ub294 \uc6d0\uc18c\ub97c \uac01\uac01 \ud0d0\uc0c9\ud55c\ub2e4.  ")),Object(a.b)("h2",{id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc758-\uad6c\ud604"},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc758 \uad6c\ud604"),Object(a.b)("h3",{id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-node-binsearchtree"},"1. \ud074\ub798\uc2a4 \uc0dd\uc131: Node, BinSearchTree"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, key, data):\n        self.key = key\n        self.data = data\n        self.left = None\n        self.right = None\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinSearchTree:\n    def __init__(self):\n        self.root = None\n")),Object(a.b)("h3",{id:"2-\ub370\uc774\ud130-\uc6d0\uc18c-\ub098\uc5f4-inorder"},"2. \ub370\uc774\ud130 \uc6d0\uc18c \ub098\uc5f4: inorder()"),Object(a.b)("p",null,"\uae4a\uc774 \uc6b0\uc120 \uc21c\ud68c\uc758 \uc911\uc704 \uc21c\ud68c\uc640 \uc720\uc0ac\ud558\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def inorder(self):\n        traversal = []\n        if self.left:\n            traversal += self.left.inorder()\n        # self\ub97c \ub9ac\ud134\ud568\uc73c\ub85c\uc368 \ub178\ub4dc\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ub9ac\ud134\ud568\n        traversal.append(self)\n        if self.right:\n            traversal += self.right.inorder()\n        return traversal\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinSearchTree:\n    def inorder(self):\n        if self.root:\n            return self.root.inorder()\n        else:\n            return []\n")),Object(a.b)("h3",{id:"3-\ucd5c\uc18c-\ud0a4\uc758-\uc6d0\uc18c-\ud0d0\uc0c9-min"},"3. \ucd5c\uc18c \ud0a4\uc758 \uc6d0\uc18c \ud0d0\uc0c9: min()"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def min(self):\n        # \uc791\uc740 \uac12\uc740 \uc67c\ucabd\uc5d0 \uc788\uc73c\ubbc0\ub85c \uc67c\ucabd\ub9cc \ud0d0\uc0c9 \n        if self.left:\n            return self.left.min()\n        # \uc67c\ucabd\uc5d0 \uac12\uc774 \uc5c6\uc73c\uba74 \uc790\uae30 \uc790\uc2e0\uc744 \ub9ac\ud134\n        else:\n            return self\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinSearchTree:\n    def min(self):\n        if self.root:\n            return self.root.min()\n        else:\n            return None\n")),Object(a.b)("h3",{id:"4-\ucd5c\ub300-\ud0a4\uc758-\uc6d0\uc18c-\ud0d0\uc0c9-max"},"4. \ucd5c\ub300 \ud0a4\uc758 \uc6d0\uc18c \ud0d0\uc0c9: max()"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def max(self):\n        if self.right:\n            return self.right.max()\n        else:\n            return self\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinSearchTree:\n    def max(self):\n        if self.root:\n            return self.root.min()\n        else:\n            return None\n")),Object(a.b)("h3",{id:"5-\ud2b9\uc815-\uc6d0\uc18c-\uac80\uc0c9-lookup"},"5. \ud2b9\uc815 \uc6d0\uc18c \uac80\uc0c9: lookup()"),Object(a.b)("p",null,"\ucc3e\uc73c\ub824\ub294 \ub300\uc0c1\uc758 \ud0a4 \uac12\uc744 \uc785\ub825\ud558\uc5ec \ub178\ub4dc\uc640 \ubd80\ubaa8 \ub178\ub4dc\ub97c \ub9ac\ud134\ud558\uba70, \uc5c6\ub294 \uacbd\uc6b0 \uac01\uac01 None\uc744 \ub9ac\ud134\ud55c\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def lookup(self, key, parent=None):\n        # key\uac00 \ud604\uc7ac \ub178\ub4dc\uc758 key \ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\n        if key < self.key:\n            if self.left:\n                return self.left.lookup(key, self)  # parent\ub294 \uc790\uae30 \uc790\uc2e0\n            else:\n                return None, None \n        # key\uac00 \ud604\uc7ac \ub178\ub4dc\uc758 key \ubcf4\ub2e4 \ud070 \uacbd\uc6b0\n        elif key > self.key:\n            if self.right:\n                return self.right.lookup(key, self)\n            else:\n                return None, None\n        # key\uac00 \ud604\uc7ac \ub178\ub4dc\uc758 key\uc640 \ub3d9\uc77c\ud55c \uacbd\uc6b0\n        else:\n            return self, parent\n                \n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinarySearchTree:\n    def lookup(self, key):\n        if self.root:\n            return self.root.lookup(key)\n        else:\n            return None, None\n")),Object(a.b)("h3",{id:"6-\ub370\uc774\ud130-\uc6d0\uc18c-\ucd94\uac00-insert"},"6. \ub370\uc774\ud130 \uc6d0\uc18c \ucd94\uac00: insert()"),Object(a.b)("p",null,"\ud0a4\uc640 \ub370\uc774\ud130 \uc6d0\uc18c\ub97c \uc785\ub825\ubc1b\uc73c\uba70, \ub9ac\ud134 \uac12\uc740 \uc5c6\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def insert(self, key, data):\n        if key < self.key:\n            if self.left:\n                return self.left.insert(key, data)\n            else:\n                self.left = Node(key, data)\n        elif key > self.key:\n            if self.right:\n                return self.right.insert(key, data)\n            else:\n                self.right = Node(key, data)\n        else:\n            raise KeyError('Duplicated Key')\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinTreeSearch:\n    def insert(self, key, data):\n        if self.root:\n            return self.root.insert(key, data)\n        else:\n            self.root = Node(key, data)\n")),Object(a.b)("h3",{id:"7-\ud2b9\uc815-\uc6d0\uc18c-\uc0ad\uc81c-remove"},"7. \ud2b9\uc815 \uc6d0\uc18c \uc0ad\uc81c: remove()"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"\ud0a4\ub97c \uc774\uc6a9\ud558\uc5ec \ub178\ub4dc\ub97c \ucc3e\ub294\ub2e4.  ",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"\ud574\ub2f9 \ud0a4\uc758 \ub178\ub4dc\uac00 \uc5c6\ub294 \uacbd\uc6b0, \uc0ad\uc81c\ud560 \uac83\ub3c4 \uc5c6\ub2e4.  "),Object(a.b)("li",{parentName:"ul"},"\ucc3e\uc740 \ub178\ub4dc\uc758 \ubd80\ubaa8 \ub178\ub4dc\ub3c4 \uc54c\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4.",Object(a.b)("br",{parentName:"li"}),"(\uc774 \ubd80\ubd84 \ub54c\ubb38\uc5d0 lookup() \uba54\uc18c\ub4dc \uad6c\ud604 \uc2dc \ubd80\ubaa8 \ub178\ub4dc\uae4c\uc9c0 \ub9ac\ud134)  "))),Object(a.b)("li",{parentName:"ol"},"\ucc3e\uc740 \ub178\ub4dc\ub97c \uc81c\uac70\ud558\uace0\ub3c4 \uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac \uc131\uc9c8\uc744 \ub9cc\uc871\ud558\ub3c4\ub85d \ud2b8\ub9ac\uc758 \uad6c\uc870\ub97c \uc815\ub9ac\ud55c\ub2e4.  ")),Object(a.b)("p",null,"\ud0a4\ub97c \uc785\ub825\ubc1b\uc544 \uc0ad\uc81c\ub97c \uc218\ud589\ud588\uc73c\uba74 True, \ud574\ub2f9 \ud0a4\uc758 \ub178\ub4dc\uac00 \uc5c6\uc73c\uba74 False\ub97c \ub9ac\ud134\ud55c\ub2e4.  "),Object(a.b)("p",null,"\uc0ad\uc81c\ub418\ub294 \ub178\ub4dc\uac00",Object(a.b)("br",{parentName:"p"}),"\n","leaf \ub178\ub4dc\uc778 \uacbd\uc6b0, \ubd80\ubaa8 \ub178\ub4dc\uc758 \ub9c1\ud06c\ub97c \uc870\uc815\ud558\uc5ec \ud574\ub2f9 \ub178\ub4dc\ub97c \uc5c6\uc564\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\uc790\uc2dd\uc744 \ud558\ub098 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0, \uc0ad\uc81c\ub418\ub294 \ub178\ub4dc \uc790\ub9ac\uc5d0 \uadf8 \uc790\uc2dd \ub178\ub4dc\ub97c \ub300\uc2e0 \ubc30\uce58\ud558\uace0 \ubd80\ubaa8 \ub178\ub4dc\uc758 \ub9c1\ud06c\ub97c \uc870\uc815\ud55c\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\uc790\uc2dd\uc744 \ub458 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0, \uc0ad\uc81c\ub418\ub294 \ub178\ub4dc\ubcf4\ub2e4 \ubc14\ub85c \ub2e4\uc74c \ud0a4\ub97c \uac00\uc9c0\ub294 \ub178\ub4dc\ub97c \ucc3e\uc544 \uc0ad\uc81c\ub418\ub294 \ub178\ub4dc \uc790\ub9ac\uc5d0 \ub300\uc2e0 \ubc30\uce58\ud55c\ub2e4.",Object(a.b)("br",{parentName:"p"}),"\n","\ub610\ud55c, \uc0ad\uc81c\ub418\ub294 \ub178\ub4dc\uac00 root node\uc778 \uacbd\uc6b0\uc5d0 \ub300\ud574\uc11c\ub3c4 \ucc98\ub9ac\uac00 \ud544\uc694\ud558\ub2e4.  "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\uc790\uc2dd\uc758 \uc218: countChildren()"',title:'"\uc790\uc2dd\uc758',"\uc218:":!0,'countChildren()"':!0},"class Node:\n    def countChildren(self):\n        count = 0\n        if self.left:\n            count += 1\n        if self.right:\n            count += 1\n        return count\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"class BinSearchTree:\n    def remove(self, key):\n        node, parent = self.lookup(key)\n        if node:\n            nChildren = node.countChildren()\n            # \uc790\uc2dd\uc774 \uc5c6\ub294 \uacbd\uc6b0\n            if nChildren == 0:\n                # parent\uac00 \uc788\uc73c\uba74 leaf node\uc778 \uc790\uc2dd\uc744 \uc5c6\uc570\n                if parent:\n                    if node == parent.left:\n                        parent.left = None\n                    else:\n                        parent.right = None\n                # parent\uac00 \uc5c6\uc73c\uba74 node\ub294 root\n                else:\n                    self.root = None\n            # \uc790\uc2dd\uc774 \ud558\ub098\uc778 \uacbd\uc6b0\n            elif nChildren == 1:\n                # \uc784\uc758\uc758 \ubcc0\uc218\uc5d0 \ubcc0\uc218 \ud560\ub2f9\n                if node.left:\n                    temp = node.left\n                else:\n                    temp = node.right\n                # parent\uac00 \uc788\uc73c\uba74 temp\ub97c node \uc790\ub9ac\uc5d0 \ub123\uc74c\n                if parent:\n                    if node == parent.left:\n                        parent.left = temp\n                    else:\n                        parent.right = temp\n                # parent\uac00 \uc5c6\uc73c\uba74 root\uc5d0 temp \ud560\ub2f9\n                else:\n                    self.root = temp\n            # \uc790\uc2dd\uc774 \ub458\uc774 \uacbd\uc6b0\n            else:\n                parent = node\n                successor = node.right\n                # \uc0ad\uc81c\ud560 \ub178\ub4dc \ubc14\ub85c \ub2e4\uc74c \ud0a4 \uac12\uc744 \ucc3e\uc744 \ub54c\uae4c\uc9c0 successor\ub294 \uc67c\ucabd \uc790\uc2dd\uc758 \ub9c1\ud06c\ub97c \ubc18\ubcf5\ud558\uc5ec \ub530\ub77c\uac10\n                while successor.left:\n                    parent = successor\n                    successor = successor.left\n                # node\uc758 key\uc640 data\uc5d0 successor \ub300\uc785\n                node.key = successor.key\n                node.data = successor.data\n                # parent\uc640 successor\uc758 \uc790\uc2dd \uc5f0\uacb0\n                if successor == parent.left:\n                    parent.left = successor.right\n                else:\n                    parent.right = successor.right\n            return True\n        else:\n            return False\n")),Object(a.b)("h2",{id:"4-\ub108\ube44-\uc6b0\uc120-\ud0d0\uc0c9-bfs-breadth-first-search"},"4. \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 (BFS, Breadth-First Search)"),Object(a.b)("p",null,"\ud55c \uc815\uc810\uc5d0\uc11c \uc778\uc811\ud55c \ubaa8\ub4e0 (\uc544\uc9c1 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740) \uc815\uc810\uc744 \ubc29\ubb38\ud558\uace0, \ubc29\ubb38\ud55c \uac01 \uc778\uc811 \uc815\uc810\uc744 \uae30\uc900\uc73c\ub85c (\ubc29\ubb38\ud55c \uc21c\uc11c\uc5d0 \ub530\ub77c) \ub610\ub2e4\uc2dc \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ud589\ud55c\ub2e4.  "),Object(a.b)("p",null,"\uc5ec\uae30\uc11c\ub294 \ud050\ub97c \uc774\uc6a9\ud558\uc5ec \uc5b4\ub290 \uc815\uc810\uc5d0\uc11c BFS\ub97c \ud558\uace0 \uc788\ub294\uc9c0\ub97c \uae30\uc5b5\ud558\uace0 \uc9c4\ud589\ud55c\ub2e4.  "),Object(a.b)("h2",{id:"5-\uae4a\uc774-\uc6b0\uc120-\ud0d0\uc0c9-dfs-depth-first-search"},"5. \uae4a\uc774 \uc6b0\uc120 \ud0d0\uc0c9 (DFS, Depth-First Search)"),Object(a.b)("p",null,"\ud55c \uc815\uc810\uc5d0\uc11c \uc778\uc811\ud55c \ubaa8\ub4e0 (\uc544\uc9c1 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740) \uc815\uc810\uc744 \ubc29\ubb38\ud558\ub418, \uac01 \uc778\uc811 \uc815\uc810\uc744 \uae30\uc900\uc73c\ub85c \uae4a\uc774 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ub05d\ub0b8 \ud6c4 \ub2e4\uc74c \uc815\uc810\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.  "),Object(a.b)("p",null,"\uc5ec\uae30\uc11c\ub294 \uc2a4\ud0dd\uc744 \uc774\uc6a9\ud558\uc5ec \uc5b4\ub290 \uc815\uc810\uc5d0\uc11c DFS\ub97c \ud558\uace0 \uc788\ub294\uc9c0\ub97c \uae30\uc5b5\ud558\uace0 \ub418\ub3cc\uc544\uac04\ub2e4.  "),Object(a.b)("h3",{id:"\uc5f0\uc2b5\ubb38\uc81c---\uc5ec\ud589\uacbd\ub85c"},"\uc5f0\uc2b5\ubb38\uc81c - \uc5ec\ud589\uacbd\ub85c"),Object(a.b)("h4",{id:"\uc785\ucd9c\ub825-\uc608"},"\uc785\ucd9c\ub825 \uc608"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:"left"},"tickets"),Object(a.b)("th",{parentName:"tr",align:"left"},"return"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"[",'["ICN", "JFK"]',", ",'["HND", "IAD"]',", ",'["JFK", "HND"]',"]"),Object(a.b)("td",{parentName:"tr",align:"left"},'["ICN", "JFK", "HND", "IAD"]')),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:"left"},"[",'["ICN", "SFO"]',", ",'["ICN", "ATL"]',", ",'["SFO", "ATL"]',", ",'["ATL", "ICN"]',", ",'["ATL","SFO"]',"]"),Object(a.b)("td",{parentName:"tr",align:"left"},'["ICN", "ATL", "ICN", "SFO", "ATL", "SFO"]')))),Object(a.b)("h4",{id:"\uac15\uc758-\ud480\uc774"},"\uac15\uc758 \ud480\uc774"),Object(a.b)("p",null,"\uc6d0\uce59: \uc7ac\uadc0\uc801\uc778 \uc131\uc9c8\uc744 \uac00\uc9c4 \ud55c \ubd93 \uadf8\ub9ac\uae30 \ubb38\uc81c\uc774\uba70, \uc2dc\uc791 \uc815\uc810\uc740 \uc5b8\uc81c\ub098 ",Object(a.b)("inlineCode",{parentName:"p"},"ICN")),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"\uc0ac\uc804\uc744 \uc774\uc6a9\ud558\uc5ec \uac01 \uacf5\ud56d\uc5d0\uc11c \ucd9c\ubc1c\ud558\ub294 \ud56d\uacf5\uad8c\uc758 \ub9ac\uc2a4\ud2b8\ub97c \ud45c\ud604\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\uac01 \ub3c4\ucc29\uc9c0\ub97c \uc54c\ud30c\ubcb3 \uc5ed\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"ICN\uc5d0\uc11c \uac08 \uc218 \uc788\ub294 \uacf5\ud56d \uc911 \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uac00\uc7a5 \uc55e\uc778 \uacf5\ud56d\uc744 \uba3c\uc800 \ubc29\ubb38\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ubc29\ubb38\ud55c \ud2f0\ucf13\uc740 \uc81c\uac70\ud55c\ub2e4.  "),Object(a.b)("li",{parentName:"ol"},"\ubc18\ubcf5\ud55c\ub2e4.  ")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def solution(tickets):\n    routes = {}\n    for t in tickets:\n        routes[t[0]] = routes.get(t[0], []) + [t[1]]\n    # O(n log n)\n    for r in routes:\n        routes[r].sort(reverse=True)\n    stack = ['ICN']\n    path = []\n    # O(n)\n    while stack:\n        top = stack[-1]\n        if top not in routes or len(routes[top]) == 0:\n            path.append(stack.pop())\n        else:\n            stack.append(routes[top].pop())\n    return path[::-1]\n")),Object(a.b)("p",null,"\uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O(n log n)  "))}o.isMDXComponent=!0}}]);