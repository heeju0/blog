(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{166:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,b=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=o(n),u=a,m=s["".concat(b,".").concat(u)]||s[u]||d[u]||l;return n?r.a.createElement(m,c(c({ref:t},p),{},{components:n})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,b=new Array(l);b[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,b[1]=c;for(var p=2;p<l;p++)b[p]=n[p];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return o}));var a=n(3),r=n(7),l=(n(0),n(166)),b={id:"data_structures6",title:"\ud799",sidebar_label:"\ud799"},c={unversionedId:"kdt/data_structures/data_structures6",id:"kdt/data_structures/data_structures6",isDocsHomePage:!1,title:"\ud799",description:"\ud83d\udca1 \u300eKDT \ud504\ub85c\uadf8\ub798\uba38\uc2a4 \uc778\uacf5\uc9c0\ub2a5 \ub370\ube0c\ucf54\uc2a4\u300f\uc5d0\uc11c \uacf5\ubd80\uc911..\ud83d\udc40",source:"@site/docs\\kdt\\data_structures\\data_structures6.md",slug:"/kdt/data_structures/data_structures6",permalink:"/willbe/docs/kdt/data_structures/data_structures6",version:"current",sidebar_label:"\ud799",sidebar:"kdt",previous:{title:"\ud2b8\ub9ac",permalink:"/willbe/docs/kdt/data_structures/data_structures5"},next:{title:"\ud574\uc2dc",permalink:"/willbe/docs/kdt/data_structures/data_structures7"}},i=[{value:"1. \ud799 (Heaps)",id:"1-\ud799-heaps",children:[{value:"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc640\uc758 \ube44\uad50",id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc640\uc758-\ube44\uad50",children:[]}]},{value:"\ucd5c\ub300 \ud799 (Max Heap)\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870",id:"\ucd5c\ub300-\ud799-max-heap\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870",children:[{value:"\uc5f0\uc0b0 \uc815\uc758",id:"\uc5f0\uc0b0-\uc815\uc758",children:[]},{value:"\ub370\uc774\ud130 \ud45c\ud604",id:"\ub370\uc774\ud130-\ud45c\ud604",children:[]}]},{value:"\ubc30\uc5f4\ub85c \ucd5c\ub300 \ud799 \uad6c\ud604",id:"\ubc30\uc5f4\ub85c-\ucd5c\ub300-\ud799-\uad6c\ud604",children:[{value:"1. \ud074\ub798\uc2a4 \uc0dd\uc131: MaxHeap",id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-maxheap",children:[]},{value:"2. \uc0c8\ub85c\uc6b4 \uc6d0\uc18c \uc0bd\uc785: insert()",id:"2-\uc0c8\ub85c\uc6b4-\uc6d0\uc18c-\uc0bd\uc785-insert",children:[]},{value:"3. \ucd5c\ub300 \uc6d0\uc18c \uc0ad\uc81c: remove()",id:"3-\ucd5c\ub300-\uc6d0\uc18c-\uc0ad\uc81c-remove",children:[]}]},{value:"\ucd5c\ub300/\ucd5c\uc18c \ud799\uc758 \uc751\uc6a9",id:"\ucd5c\ub300\ucd5c\uc18c-\ud799\uc758-\uc751\uc6a9",children:[{value:"\ud799 \uc815\ub82c (heap sort)\uc758 \uad6c\ud604",id:"\ud799-\uc815\ub82c-heap-sort\uc758-\uad6c\ud604",children:[]},{value:"\uc5f0\uc2b5\ubb38\uc81c - \ub354 \ub9f5\uac8c",id:"\uc5f0\uc2b5\ubb38\uc81c---\ub354-\ub9f5\uac8c",children:[]}]}],p={toc:i};function o(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"\ud83d\udca1 \u300eKDT \ud504\ub85c\uadf8\ub798\uba38\uc2a4 \uc778\uacf5\uc9c0\ub2a5 \ub370\ube0c\ucf54\uc2a4\u300f\uc5d0\uc11c \uacf5\ubd80\uc911..\ud83d\udc40"),Object(l.b)("h2",{id:"1-\ud799-heaps"},"1. \ud799 (Heaps)"),Object(l.b)("p",null,"= \uc774\uc9c4 \ud799 (binary heap)\n\uc774\uc9c4 \ud2b8\ub9ac\uc758 \ud55c \uc885\ub958\ub85c, root \ub178\ub4dc\uac00 \ud56d\uc0c1 \ucd5c\ub313\uac12 \ub610\ub294 \ucd5c\uc19f\uac12\uc744 \uac00\uc9c0\uba70 (\ucd5c\ub300 \ud799, \ucd5c\uc18c \ud799), \uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac\ub2e4.  "),Object(l.b)("p",null,"\uc5b4\ub5a4 \ub178\ub4dc\ub97c \ub8e8\ud2b8\ub85c \ud558\ub354\ub77c\ub3c4 \uc11c\ube0c\ud2b8\ub9ac\ub294 \ubaa8\ub450 \ucd5c\ub300 \ud799 \ub610\ub294 \ucd5c\uc18c \ud799 \ud615\ud0dc\ub97c \ubcf4\uc774\ubbc0\ub85c \uc7ac\uadc0\uc801\uc73c\ub85c \uc815\uc758 \uac00\ub2a5\ud558\ub2e4.  "),Object(l.b)("h3",{id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac\uc640\uc758-\ube44\uad50"},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac\uc640\uc758 \ube44\uad50"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Q"),Object(l.b)("th",{parentName:"tr",align:null},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac"),Object(l.b)("th",{parentName:"tr",align:null},"\ud799"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"\uc6d0\uc18c\ub4e4\uc740 \uc644\uc804\ud788 \ud06c\uae30 \uc21c\uc73c\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294\uac00?"),Object(l.b)("td",{parentName:"tr",align:null},"Y"),Object(l.b)("td",{parentName:"tr",align:null},"N (\ub290\uc2a8\ud558\uac8c \uc5f0\uacb0)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"\ud2b9\uc815 \ud0a4 \uac12\uc744 \uac00\uc9c0\ub294 \uc6d0\uc18c\ub97c \ube60\ub974\uac8c \uac80\uc0c9\ud560 \uc218 \uc788\ub294\uac00?"),Object(l.b)("td",{parentName:"tr",align:null},"Y"),Object(l.b)("td",{parentName:"tr",align:null},"N")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"\ubd80\uac00\uc758 \uc81c\uc57d \uc870\uac74\uc740 \uc5b4\ub5a4 \uac83\uc778\uac00?"),Object(l.b)("td",{parentName:"tr",align:null},"-"),Object(l.b)("td",{parentName:"tr",align:null},"\uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac\uc5ec\uc57c \ud568")))),Object(l.b)("h2",{id:"\ucd5c\ub300-\ud799-max-heap\uc758-\ucd94\uc0c1\uc801-\uc790\ub8cc\uad6c\uc870"},"\ucd5c\ub300 \ud799 (Max Heap)\uc758 \ucd94\uc0c1\uc801 \uc790\ub8cc\uad6c\uc870"),Object(l.b)("h3",{id:"\uc5f0\uc0b0-\uc815\uc758"},"\uc5f0\uc0b0 \uc815\uc758"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"\ube48 \ucd5c\ub300 \ud799 \uc0dd\uc131: ",Object(l.b)("strong",{parentName:"li"},"init"),"()  "),Object(l.b)("li",{parentName:"ol"},"\uc0c8\ub85c\uc6b4 \uc6d0\uc18c \uc0bd\uc785: insert()  "),Object(l.b)("li",{parentName:"ol"},"\ucd5c\ub300 \uc6d0\uc18c (root node) \uc81c\uac70(\ubc18\ud658): remove()  ")),Object(l.b)("h3",{id:"\ub370\uc774\ud130-\ud45c\ud604"},"\ub370\uc774\ud130 \ud45c\ud604"),Object(l.b)("p",null,"\ubc30\uc5f4\ub85c \ucd5c\ub300 \ud799\uc744 \uad6c\ud604\ud55c\ub2e4.  "),Object(l.b)("p",null,"\ub178\ub4dc \ubc88\ud638 m\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd \uc790\uc2dd\uc758 \ubc88\ud638\ub294 2 ",Object(l.b)("em",{parentName:"p"}," m, \uc624\ub978\ucabd \uc790\uc2dd\uc758 \ubc88\ud638\ub294 2 ")," m + 1, \ubd80\ubaa8 \ub178\ub4dc\uc758 \ubc88\ud638\ub294 m // 2\ub85c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4.  "),Object(l.b)("p",null,"\ub610\ud55c \ud799\uc740 \uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac\uc774\ubbc0\ub85c \ub178\ub4dc\uc758 \ucd94\uac00\uc640 \uc0ad\uc81c\ub294 \ub9c8\uc9c0\ub9c9 \ub178\ub4dc\uc5d0\uc11c\ub9cc \uc774\ub8e8\uc5b4\uc9c4\ub2e4.   "),Object(l.b)("h2",{id:"\ubc30\uc5f4\ub85c-\ucd5c\ub300-\ud799-\uad6c\ud604"},"\ubc30\uc5f4\ub85c \ucd5c\ub300 \ud799 \uad6c\ud604"),Object(l.b)("h3",{id:"1-\ud074\ub798\uc2a4-\uc0dd\uc131-maxheap"},"1. \ud074\ub798\uc2a4 \uc0dd\uc131: MaxHeap"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class MaxHeap:\n    def __init__(self):\n        self.data = [None]  # 0\ubc88 \uc778\ub371\uc2a4\ub294 \ubc84\ub9bc\n")),Object(l.b)("h3",{id:"2-\uc0c8\ub85c\uc6b4-\uc6d0\uc18c-\uc0bd\uc785-insert"},"2. \uc0c8\ub85c\uc6b4 \uc6d0\uc18c \uc0bd\uc785: insert()"),Object(l.b)("p",null,"\ud2b8\ub9ac\uc758 \ub9c8\uc9c0\ub9c9 \uc790\ub9ac\uc5d0 \uc0c8\ub85c\uc6b4 \uc6d0\uc18c\ub97c \uc784\uc2dc\ub85c \uc800\uc7a5\ud558\uace0, \ubd80\ubaa8 \ub178\ub4dc\uc640 \ud0a4 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uac12\uc774 \ud06c\ub2e4\uba74 \uc6d0\uc18c\ub97c \uc704\ub85c \uc774\ub3d9\uc2dc\ud0a8\ub2e4.  "),Object(l.b)("p",null,"\uc6d0\uc18c\uc758 \uac1c\uc218\uac00 n\uc778 \ucd5c\ub300 \ud799\uc5d0 \uc0c8\ub85c\uc6b4 \uc6d0\uc18c\ub97c \uc0bd\uc785\ud558\ub294 \uacbd\uc6b0, \ubd80\ubaa8 \ub178\ub4dc\uc640\uc758 \ub300\uc18c \ube44\uad50 \ucd5c\ub300 \ud69f\uc218\ub97c \ub530\uc838 \ubd24\uc744 \ub54c \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(log n)\uc774\ub2e4.  "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"def insert(self, item):\n    self.data.append(item)\n    m = len(self.data) - 1\n    while m > 1\n        if self.data[m] > self.data[m//2]:\n            self.data[m], self.data[m//2] = self.data[m//2], self.\n            data[m]\n            m //= 2\n        else:\n            break\n")),Object(l.b)("h3",{id:"3-\ucd5c\ub300-\uc6d0\uc18c-\uc0ad\uc81c-remove"},"3. \ucd5c\ub300 \uc6d0\uc18c \uc0ad\uc81c: remove()"),Object(l.b)("p",null,"\ucd5c\ub313\uac12\uc778 \ub8e8\ud2b8 \ub178\ub4dc\ub97c \uc81c\uac70\ud558\uace0, \ud2b8\ub9ac \ub9c8\uc9c0\ub9c9 \uc790\ub9ac \ub178\ub4dc\ub97c \uc784\uc2dc\ub85c \ub8e8\ud2b8 \ub178\ub4dc\uc758 \uc790\ub9ac\uc5d0 \ubc30\uce58\ud55c \ub4a4 \uc790\uc2dd \ub178\ub4dc\uc640 \ud0a4 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uac12\uc774 \uc791\ub2e4\uba74 \uc6d0\uc18c\ub97c \uc544\ub798\ub85c \uc774\ub3d9\uc2dc\ud0a4\ub294\ub370 \uc774\ub54c \uc790\uc2dd \ub178\ub4dc\uac00 \ub458\uc774\ub77c\uba74, \ub354 \ud070 \uac12 \ucabd\uc73c\ub85c \uc62e\uae34\ub2e4 (root\uc5d0\ub294 \uac00\uc7a5 \ud070 \uac12\uc774 \uc640\uc57c \ud558\uae30 \ub54c\ubb38).  "),Object(l.b)("p",null,"\uc6d0\uc18c\uc758 \uac1c\uc218\uac00 n\uc778 \ucd5c\ub300 \ud799\uc5d0\uc11c \ucd5c\ub300 \uc6d0\uc18c\ub97c \uc0ad\uc81c\ud558\ub294 \uacbd\uc6b0, \uc790\uc2dd \ub178\ub4dc\uc640\uc758 \ub300\uc18c \ube44\uad50 \ucd5c\ub300 \ud69f\uc218\ub294 2log n\uc774\ubbc0\ub85c \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(log n)\uc774\ub2e4.  "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"def remove(self):\n    if len(self.data) > 1:\n        self.data[1], self.data[-1] = self.data[-1], self.data[1]\n        data = self.data.pop()\n        self.maxHeapify(1)\n    else:\n        data = None\n    return data\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"def maxHeapify(self, i):\n    left = 2 * i\n    right = 2 * i + 1\n    # \uc790\uc2e0(i), \uc67c\ucabd \uc790\uc2dd(left), \uc624\ub978\ucabd \uc790\uc2dd(right) \uc911 \ucd5c\ub300\ub97c \ucc3e\uc74c\n    if left < len(self.data) and self.data[left] > self.data[smallest]:\n        smallest = left\n    if right < len(self.data) and self.data[right] > self.data[smallest]:\n        smallest = right\n    if smallest != i:\n        self.data[i], self.data[smallest] = self.data[smallest], self.data[i]\n        self.maxHeapify(self, smallest)\n")),Object(l.b)("h2",{id:"\ucd5c\ub300\ucd5c\uc18c-\ud799\uc758-\uc751\uc6a9"},"\ucd5c\ub300/\ucd5c\uc18c \ud799\uc758 \uc751\uc6a9"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"\uc6b0\uc120\uc21c\uc704 \ud050 (priority queue)",Object(l.b)("br",{parentName:"li"}),"Enqueue\ud560 \ub54c, \ub290\uc2a8\ud55c \uc815\ub82c\uc744 \uc774\ub8e8\uace0 \uc788\ub3c4\ub85d \ud55c\ub2e4. (O(log n))",Object(l.b)("br",{parentName:"li"}),"Dequeue\ud560 \ub54c, \ucd5c\ub313\uac12 \ub610\ub294 \ucd5c\uc19f\uac12\uc744 \uc21c\uc11c\ub300\ub85c \ucd94\ucd9c\ud55c\ub2e4. (O(log n))",Object(l.b)("br",{parentName:"li"}),"\u2757 \uc591\ubc29\ud5a5 \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud55c \uad6c\ud604\uacfc \ud6a8\uc728\uc131\uc744 \ube44\uad50\ud574\ubcf4\uc790.  "),Object(l.b)("li",{parentName:"ol"},"\ud799 \uc815\ub82c (heap sort)",Object(l.b)("br",{parentName:"li"}),"\uc815\ub82c\ub418\uc9c0 \uc54a\uc740 \uc6d0\uc18c\ub4e4\uc744 \uc544\ubb34 \uc21c\uc11c\ub85c\ub098 \ucd5c\ub300 \ud799\uc5d0 \uc0bd\uc785\ud55c\ub2e4.(O(log n))",Object(l.b)("br",{parentName:"li"}),"\uc0bd\uc785\uc774 \ub05d\ub098\uba74, \ud799\uc774 \ube44\uc5b4 \uc788\uc744 \ub54c\uae4c\uc9c0 \ud558\ub098\uc529 \uc0ad\uc81c\ud55c\ub2e4. (O(log n))",Object(l.b)("br",{parentName:"li"}),"\uc6d0\uc18c\ub4e4\uc774 \uc0ad\uc81c\ub41c \uc21c\uc11c\uac00 \uc6d0\uc18c\ub4e4\uc758 \uc815\ub82c \uc21c\uc11c\uc774\uba70, \uc774\ub54c\uc758 \uc815\ub82c \uc54c\uace0\ub9ac\uc998\uc758 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(n log n)\uc774\ub2e4.  ")),Object(l.b)("h3",{id:"\ud799-\uc815\ub82c-heap-sort\uc758-\uad6c\ud604"},"\ud799 \uc815\ub82c (heap sort)\uc758 \uad6c\ud604"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"def heapsort(unsorted):\n    H = MaxHeap()\n    for item in unsorted:\n        H.insert(item)\n    sorted = []\n    d = H.remove()\n    while d:\n        sorted.append(d)\n        d = H.remove()\n    return sorted\n")),Object(l.b)("h3",{id:"\uc5f0\uc2b5\ubb38\uc81c---\ub354-\ub9f5\uac8c"},"\uc5f0\uc2b5\ubb38\uc81c - \ub354 \ub9f5\uac8c"),Object(l.b)("h4",{id:"\uc785\ucd9c\ub825-\uc608"},"\uc785\ucd9c\ub825 \uc608"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:"left"},"scoville"),Object(l.b)("th",{parentName:"tr",align:"left"},"K"),Object(l.b)("th",{parentName:"tr",align:"left"},"return"),Object(l.b)("th",{parentName:"tr",align:"left"}))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"[1, 2, 3, 9, 10, 12]"),Object(l.b)("td",{parentName:"tr",align:"left"},"7"),Object(l.b)("td",{parentName:"tr",align:"left"},"2"),Object(l.b)("td",{parentName:"tr",align:"left"})))),Object(l.b)("h4",{id:"\uac15\uc758-\ud480\uc774"},"\uac15\uc758 \ud480\uc774"),Object(l.b)("p",null,"\uc6d0\uce59: \uc55e \uc790\ub9ac\uc5d0 \ud070 \uc218\uac00 \uc624\ub294 \uac83\uc774 \uc804\uccb4\ub97c \ud06c\uac8c \ub9cc\ub4e0\ub2e4.  "),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"number\ub85c\ubd80\ud130 \ud558\ub098\uc529 \uaebc\ub0b4\uc5b4 \ubaa8\uc73c\ub418, \uc774\ubbf8 \ubaa8\uc544\ub454 \uac83 \uc911 \uc9c0\uae08 \ub4f1\uc7a5\ud55c \uac83\ubcf4\ub2e4 \uc791\uc740 \uac83\ub4e4\uc740 \ube7c\ub0b8\ub2e4.  "),Object(l.b)("li",{parentName:"ol"},"k\uac1c\ub9cc\ud07c \uc81c\uac70\ud558\uba74 \ub0a8\uc740 \uc22b\uc790\ub294 \ubaa8\ub450 \ub2f4\ub294\ub2e4.  "),Object(l.b)("li",{parentName:"ol"},"\uc544\uc9c1 k \ub9cc\ud07c \ucc44\uc6b0\uc9c0 \ubabb\ud55c \uacbd\uc6b0 \ub4a4\uc5d0\uc11c \ub0a8\uc740 \uc218\ub9cc\ud07c \ube7c\ub0b8\ub2e4.  ")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"from heapq import *\n\ndef solution(scoville, K):\n    answer = 0\n    heapify(scoville)\n    # \ucd5c\uc545\uc758 \uacbd\uc6b0 O(n)\n    while True:\n        # O(log n)\n        min1 = heappop(scoville)\n        if min1 >= K:\n            break\n        if len(scoville) == 0:\n            answer = -1\n            break\n        # O(log n)\n        min2 = heappop(scoville)\n        new_scoville = min1 + 2 * min2\n        # O(log n)\n        heappush(scoville, new_scoville)\n        answer += 1\n    return answer\n")),Object(l.b)("p",null,"(\ud799\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0)",Object(l.b)("br",{parentName:"p"}),"\n","\uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O(n\xb2)",Object(l.b)("br",{parentName:"p"}),"\n","\ucd5c\uc545\uc758 \uacbd\uc6b0: \uc218\uac00 \ud558\ub098 \ub0a8\uc744 \ub54c\uae4c\uc9c0 \uc11e\uc5b4\uc57c \ud558\ub294 \uacbd\uc6b0 (n-1\ud68c)",Object(l.b)("br",{parentName:"p"}),"\n","\uc11e\ub294 \uc77c\uc5d0\uc11c \uc694\uad6c\ub418\ub294 \uacc4\uc0b0\ub7c9: O(n)  "),Object(l.b)("p",null,"(\ud799\uc744 \uc0ac\uc6a9\ud55c \uacbd\uc6b0)",Object(l.b)("br",{parentName:"p"}),"\n","\uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O(n log n)\n\ud799 \uad6c\uc131: O(n log n)",Object(l.b)("br",{parentName:"p"}),"\n","\uc0bd\uc785: O(log n)",Object(l.b)("br",{parentName:"p"}),"\n","\uc0ad\uc81c: O(log n)  "),Object(l.b)("h4",{id:"\ub0b4-\ud480\uc774"},"\ub0b4 \ud480\uc774"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"from heapq import *\n\ndef solution(scoville, K):\n    heapify(scoville)\n    answer = 0\n    while True:\n        a = heappop(scoville)\n        if a > K:\n            break\n        if not scoville:\n            answer = -1\n            break\n        b = heappop(scoville)\n        heappush(scoville, a + b * 2)\n        answer += 1\n    return answer\n")))}o.isMDXComponent=!0}}]);