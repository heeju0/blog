(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{148:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),d=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):b(b({},n),e)),t},s=function(e){var n=d(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},o={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=d(t),m=a,u=s["".concat(l,".").concat(m)]||s[m]||o[m]||i;return t?r.a.createElement(u,b(b({ref:n},p),{},{components:t})):r.a.createElement(u,b({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var b={};for(var c in n)hasOwnProperty.call(n,c)&&(b[c]=n[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var p=2;p<i;p++)l[p]=t[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},71:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return d}));var a=t(3),r=t(7),i=(t(0),t(148)),l={id:"pandas8",title:"\ub370\uc774\ud130\ud504\ub808\uc784 \uc751\uc6a9",sidebar_label:"\ub370\uc774\ud130\ud504\ub808\uc784 \uc751\uc6a9"},b={unversionedId:"data-science/pandas8",id:"data-science/pandas8",isDocsHomePage:!1,title:"\ub370\uc774\ud130\ud504\ub808\uc784 \uc751\uc6a9",description:"\ud83d\udca1 \ucc45 \u300e\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \ud310\ub2e4\uc2a4 \ub370\uc774\ud130 \ubd84\uc11d\u300f\uc73c\ub85c \uacf5\ubd80\uc911..\ud83d\udc40",source:"@site/docs\\data-science\\pandas8.md",slug:"/data-science/pandas8",permalink:"/willbe/docs/data-science/pandas8",version:"current",sidebar_label:"\ub370\uc774\ud130\ud504\ub808\uc784 \uc751\uc6a9",sidebar:"datascience",previous:{title:"\ub370\uc774\ud130 \uc804\ucc98\ub9ac",permalink:"/willbe/docs/data-science/pandas7"}},c=[{value:"1. \ud568\uc218 \ub9e4\ud551",id:"1-\ud568\uc218-\ub9e4\ud551",children:[{value:"1-1. \uac1c\ubcc4 \uc6d0\uc18c\uc5d0 \ud568\uc218 \ub9e4\ud551",id:"1-1-\uac1c\ubcc4-\uc6d0\uc18c\uc5d0-\ud568\uc218-\ub9e4\ud551",children:[]},{value:"1-2. \uc2dc\ub9ac\uc988 \uac1d\uccb4\uc5d0 \ud568\uc218 \ub9e4\ud551",id:"1-2-\uc2dc\ub9ac\uc988-\uac1d\uccb4\uc5d0-\ud568\uc218-\ub9e4\ud551",children:[]},{value:"1-3. \ub370\uc774\ud130\ud504\ub808\uc784 \uac1d\uccb4\uc5d0 \ud568\uc218 \ub9e4\ud551",id:"1-3-\ub370\uc774\ud130\ud504\ub808\uc784-\uac1d\uccb4\uc5d0-\ud568\uc218-\ub9e4\ud551",children:[]}]},{value:"2. \uc5f4 \uc7ac\uad6c\uc131",id:"2-\uc5f4-\uc7ac\uad6c\uc131",children:[{value:"2-1. \uc5f4 \uc21c\uc11c \ubcc0\uacbd",id:"2-1-\uc5f4-\uc21c\uc11c-\ubcc0\uacbd",children:[]},{value:"2-2. \uc5f4 \ubd84\ub9ac",id:"2-2-\uc5f4-\ubd84\ub9ac",children:[]}]},{value:"3. \ud544\ud130\ub9c1",id:"3-\ud544\ud130\ub9c1",children:[{value:"3-1. \ubd88\ub9b0 \uc778\ub371\uc2f1",id:"3-1-\ubd88\ub9b0-\uc778\ub371\uc2f1",children:[]},{value:"3-2. isin() \uba54\uc18c\ub4dc \ud65c\uc6a9",id:"3-2-isin-\uba54\uc18c\ub4dc-\ud65c\uc6a9",children:[]}]},{value:"4. \ub370\uc774\ud130\ud504\ub808\uc784 \ud569\uce58\uae30",id:"4-\ub370\uc774\ud130\ud504\ub808\uc784-\ud569\uce58\uae30",children:[{value:"4-1. \ub370\uc774\ud130\ud504\ub808\uc784 \uc5f0\uacb0",id:"4-1-\ub370\uc774\ud130\ud504\ub808\uc784-\uc5f0\uacb0",children:[]},{value:"4-2. \ub370\uc774\ud130\ud504\ub808\uc784 \ubcd1\ud569",id:"4-2-\ub370\uc774\ud130\ud504\ub808\uc784-\ubcd1\ud569",children:[]}]}],p={toc:c};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"\ud83d\udca1 \ucc45 \u300e\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \ud310\ub2e4\uc2a4 \ub370\uc774\ud130 \ubd84\uc11d\u300f\uc73c\ub85c \uacf5\ubd80\uc911..\ud83d\udc40  "),Object(i.b)("h2",{id:"1-\ud568\uc218-\ub9e4\ud551"},"1. \ud568\uc218 \ub9e4\ud551"),Object(i.b)("p",null,"\ud568\uc218 \ub9e4\ud551\uc740 \uc2dc\ub9ac\uc988 \ub610\ub294 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uac1c\ubcc4 \uc6d0\uc18c\ub97c \ud2b9\uc815 \ud568\uc218\uc5d0 \uc77c\ub300\uc77c \ub300\uc751\uc2dc\ud0a4\ub294 \uacfc\uc815\uc744 \uc758\ubbf8\ud55c\ub2e4."),Object(i.b)("h3",{id:"1-1-\uac1c\ubcc4-\uc6d0\uc18c\uc5d0-\ud568\uc218-\ub9e4\ud551"},"1-1. \uac1c\ubcc4 \uc6d0\uc18c\uc5d0 \ud568\uc218 \ub9e4\ud551"),Object(i.b)("p",null,"\u2757 Seaborn \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 titanic \ub370\uc774\ud130 \uc14b\uc744 \uc0ac\uc6a9\ud55c\ub2e4.  "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \uc2dc\ub9ac\uc988 \uc6d0\uc18c\uc5d0 \ud568\uc218 \ub9e4\ud551: Series\uac1d\uccb4.apply(\ub9e4\ud551 \ud568\uc218)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\uc2dc\ub9ac\uc988\uc758 \uc6d0\uc18c\uc5d0 apply() \uc801\uc6a9"',title:'"\uc2dc\ub9ac\uc988\uc758',"\uc6d0\uc18c\uc5d0":!0,"apply()":!0,'\uc801\uc6a9"':!0},"def add_10(n):\n    return n + 10\n\nprint(df.head(3))\n#     age     fare\n# 0  22.0   7.2500\n# 1  38.0  71.2833\n# 2  26.0   7.9250\n\nprint(df['age'].apply(add_10).head(3))\n# 0    32.0\n# 1    48.0\n# 2    36.0\n# Name: age, dtype: float64\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784 \uc6d0\uc18c\uc5d0 \ud568\uc218 \ub9e4\ud551: DataFrame\uac1d\uccb4.applymap(\ub9e4\ud551 \ud568\uc218)"),"  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784 \uc6d0\uc18c\uc5d0 applymap() \uc801\uc6a9"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784',"\uc6d0\uc18c\uc5d0":!0,"applymap()":!0,'\uc801\uc6a9"':!0},"print(df.applymap(add_10).head(3))\n#     age     fare\n# 0  32.0  17.2500\n# 1  48.0  81.2833\n# 2  36.0  17.9250\n")),Object(i.b)("h3",{id:"1-2-\uc2dc\ub9ac\uc988-\uac1d\uccb4\uc5d0-\ud568\uc218-\ub9e4\ud551"},"1-2. \uc2dc\ub9ac\uc988 \uac1d\uccb4\uc5d0 \ud568\uc218 \ub9e4\ud551"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uc5f4\uc5d0 \ud568\uc218 \ub9e4\ud551: DataFrame\uac1d\uccb4.apply(\ub9e4\ud551 \ud568\uc218, axis=0)")),Object(i.b)("p",null,"\uc2dc\ub9ac\uc988\ub97c \uc785\ub825\ubc1b\uace0 \uc2dc\ub9ac\uc988\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9e4\ud551\ud558\uba74 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubc18\ud658\ud558\uace0, \uc2dc\ub9ac\uc988\ub97c \uc785\ub825\ubc1b\uc544 \ud558\ub098\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9e4\ud551\ud558\uba74 \uc2dc\ub9ac\uc988\ub97c \ubc18\ud658\ud55c\ub2e4."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 apply(axis=0) \uc801\uc6a9"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0',"apply(axis":"0)",'\uc801\uc6a9"':!0},"def missing_value(series):\n    return series.isnull()\n\nprint(df.apply(missing_value, axis=0).head(3))\n#      age   fare\n# 0  False  False\n# 1  False  False\n# 2  False  False\n\ndef min_max(x):\n    return x.max() - x.min()\n\nprint(df.apply(min_max))\n# age      79.5800\n# fare    512.3292\n# dtype: float64\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 apply(axis=1) \uc801\uc6a9"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0',"apply(axis":"1)",'\uc801\uc6a9"':!0},"def add_two_obj(a, b):\n    return a + b\n\nprint(df.apply(lambda x: add_two_obj(x['age'], 10), axis=1).head(3))\n# 0    32.0\n# 1    48.0\n# 2    36.0\n# dtype: float64\n")),Object(i.b)("h3",{id:"1-3-\ub370\uc774\ud130\ud504\ub808\uc784-\uac1d\uccb4\uc5d0-\ud568\uc218-\ub9e4\ud551"},"1-3. \ub370\uc774\ud130\ud504\ub808\uc784 \uac1d\uccb4\uc5d0 \ud568\uc218 \ub9e4\ud551"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784 \uac1d\uccb4\uc5d0 \ud568\uc218 \ub9e4\ud551: DataFrame\uac1d\uccb4.pipe(\ub9e4\ud551 \ud568\uc218)"),"  "),Object(i.b)("p",null,"\ub370\uc774\ud130\ud504\ub808\uc784 \ubc18\ud658, \uc2dc\ub9ac\uc988 \ubc18\ud658, \uac1c\ubcc4 \uac12 \ubc18\ud658\uc774 \uac00\ub2a5\ud558\ub2e4."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 pipe() \uc801\uc6a9"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0',"pipe()":!0,'\uc801\uc6a9"':!0},"def missing_value(x):\n    return x.isnull()\n\ndef missing_count(x):\n    return missing_value(x).sum()\n\ndef total_number_missing(x):\n    return missing_count(x).sum()\n\nresult_df = df.pipe(missing_value)\nprint(result_df.head(3))\n#      age   fare\n# 0  False  False\n# 1  False  False\n# 2  False  False\n\nresult_series = df.pipe(missing_count)\nprint(result_series)\n# age     177\n# fare      0\n# dtype: int64\n\nresult_value = df.pipe(total_number_missing)\nprint(result_value)\n# 177\n")),Object(i.b)("h2",{id:"2-\uc5f4-\uc7ac\uad6c\uc131"},"2. \uc5f4 \uc7ac\uad6c\uc131"),Object(i.b)("h3",{id:"2-1-\uc5f4-\uc21c\uc11c-\ubcc0\uacbd"},"2-1. \uc5f4 \uc21c\uc11c \ubcc0\uacbd"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uc5f4 \uc21c\uc11c \ubcc0\uacbd: DataFrame\uac1d\uccb4[\uc7ac\uad6c\uc131\ud55c \uc5f4 \uc774\ub984\uc758 \ub9ac\uc2a4\ud2b8]"),"  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\uc5f4 \uc21c\uc11c \ubc14\uafb8\uae30"',title:'"\uc5f4',"\uc21c\uc11c":!0,'\ubc14\uafb8\uae30"':!0},"print(df.head(3))\n#    survived  pclass     sex   age\n# 0         0       3    male  22.0\n# 1         1       1  female  38.0\n# 2         1       3  female  26.0\n\ncolumns = list(df.columns.values)\ncolumns_reversed = list(reversed(columns))\ndf_reversed = df[columns_reversed]\nprint(df_reversed.head(3))\n#     age     sex  pclass  survived\n# 0  22.0    male       3         0\n# 1  38.0  female       1         1\n# 2  26.0  female       3         1\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub9ac\uc2a4\ud2b8 \uc694\uc18c \ub4a4\uc9d1\uae30: list\uac1d\uccb4.reverse()"),Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda reversed\ub41c \uac1d\uccb4 \ub9ac\ud134: reversed(list/set/\ubb38\uc790\uc5f4 \uac1d\uccb4)"),"  "),Object(i.b)("h3",{id:"2-2-\uc5f4-\ubd84\ub9ac"},"2-2. \uc5f4 \ubd84\ub9ac"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \uc2dc\ub9ac\uc988\uc758 \ubb38\uc790\uc5f4 \ubd84\ub9ac: Series\uac1d\uccb4.str.split()"),Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \uc2dc\ub9ac\uc988\uc758 \ubb38\uc790\uc5f4 \ub9ac\uc2a4\ud2b8 \uc778\ub371\uc2f1: Series\uac1d\uccb4.str.get(\uc778\ub371\uc2a4)"),"  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\uc5f4 \ubd84\ub9ac\ud558\uae30"',title:'"\uc5f4','\ubd84\ub9ac\ud558\uae30"':!0},"print(df.head(3))\n#       \uc5f0\uc6d4\uc77c   \uac70\ub798\ub7c9\n# 0 2018-07-02  137977\n# 1 2018-06-29  170253\n# 2 2018-06-28  155769\n\ndf['\uc5f0\uc6d4\uc77c'] = df['\uc5f0\uc6d4\uc77c'].astype('str')\ndates = df['\uc5f0\uc6d4\uc77c'].str.split('-')\nprint(dates.head(3))\n# 0    [2018, 07, 02]\n# 1    [2018, 06, 29]\n# 2    [2018, 06, 28]\n# Name: \uc5f0\uc6d4\uc77c, dtype: object\n\ndf['\uc5f0'] = dates.str.get(0)\ndf['\uc6d4'] = dates.str.get(1)\ndf['\uc77c'] = dates.str.get(2)\nprint(df.head(3))\n#         \uc5f0\uc6d4\uc77c   \uac70\ub798\ub7c9     \uc5f0   \uc6d4   \uc77c\n# 0  2018-07-02   137977  2018   07   02\n# 1  2018-06-29   170253  2018   06   29\n# 2  2018-06-28   155769  2018   06   28\n")),Object(i.b)("h2",{id:"3-\ud544\ud130\ub9c1"},"3. \ud544\ud130\ub9c1"),Object(i.b)("h3",{id:"3-1-\ubd88\ub9b0-\uc778\ub371\uc2f1"},"3-1. \ubd88\ub9b0 \uc778\ub371\uc2f1"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ubd88\ub9b0 \uc778\ub371\uc2f1"',title:'"\ubd88\ub9b0','\uc778\ub371\uc2f1"':!0},"mask1 = titanic['sibsp'] == 3\nmask2 = titanic['sibsp'] == 4\nmask3 = titanic['sibsp'] == 5\ndf_boolean = titanic.loc[mask1 | mask2 | mask3]\nprint(df_boolean.head(3))\n#     survived  pclass     sex  age  sibsp\n# 7          0       3    male  2.0      3\n# 16         0       3    male  2.0      4\n# 24         0       3  female  8.0      3\n")),Object(i.b)("h3",{id:"3-2-isin-\uba54\uc18c\ub4dc-\ud65c\uc6a9"},"3-2. isin() \uba54\uc18c\ub4dc \ud65c\uc6a9"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ud544\ud130\ub9c1: DataFrame\uc758 \uc5f4 \uac1d\uccb4.isin(\ucd94\ucd9c \uac12\uc758 \ub9ac\uc2a4\ud2b8)"),"  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="isin() \ud544\ud130\ub9c1"',title:'"isin()','\ud544\ud130\ub9c1"':!0},"isin_filter = titanic['sibsp'].isin([3, 4, 5])\ndf_isin = titanic[isin_filter]\nprint(df_isin.head(3))\n#     survived  pclass     sex  age  sibsp\n# 7          0       3    male  2.0      3\n# 16         0       3    male  2.0      4\n# 24         0       3  female  8.0      3\n")),Object(i.b)("h2",{id:"4-\ub370\uc774\ud130\ud504\ub808\uc784-\ud569\uce58\uae30"},"4. \ub370\uc774\ud130\ud504\ub808\uc784 \ud569\uce58\uae30"),Object(i.b)("h3",{id:"4-1-\ub370\uc774\ud130\ud504\ub808\uc784-\uc5f0\uacb0"},"4-1. \ub370\uc774\ud130\ud504\ub808\uc784 \uc5f0\uacb0"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784 \uc5f0\uacb0: pd.concat(\ub370\uc774\ud130\ud504\ub808\uc784\uc758 \ub9ac\uc2a4\ud2b8)"),"  "),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"\uc635\uc158"),Object(i.b)("th",{parentName:"tr",align:null},"\uc124\uba85"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"axis"),Object(i.b)("td",{parentName:"tr",align:null},"0: \ud589 \ubc29\ud5a5(\uae30\ubcf8\uac12)",Object(i.b)("br",null),"1: \uc5f4 \ubc29\ud5a5")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"join"),Object(i.b)("td",{parentName:"tr",align:null},"'outer': \ub450 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \ud569\uc9d1\ud569(\uae30\ubcf8\uac12)",Object(i.b)("br",null),"'inner': \ub450 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uad50\uc9d1\ud569")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"ignore_index"),Object(i.b)("td",{parentName:"tr",align:null},"\uc0c8\ub85c\uc6b4 \ud589 \uc778\ub371\uc2a4 \uc124\uc815 \uc720\ubb34 (True/False(\uae30\ubcf8\uac12))")))),Object(i.b)("p",null,"\ucd95 \ubc29\ud5a5\uc740 \uae30\ubcf8 \uc635\uc158\uc73c\ub85c axis=0",Object(i.b)("br",{parentName:"p"}),"\n","\uc5f4 \uc774\ub984\uc5d0 \ub300\ud574\uc11c\ub294 \uae30\ubcf8\uc73c\ub85c join='outer'"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784 \uc5f0\uacb0(concatenate)"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784','\uc5f0\uacb0(concatenate)"':!0},"df1 = pd.DataFrame({'a':['a0', 'a1', 'a2', 'a3'],\n                    'b':['b0', 'b1', 'b2', 'b3'],\n                    'c':['c0', 'c1', 'c2', 'c3']},\n                    index=[0, 1, 2, 3])\ndf2 = pd.DataFrame({'a':['a2', 'a3', 'a4', 'a5'],\n                    'b':['b2', 'b3', 'b4', 'b5'],\n                    'c':['c2', 'c3', 'c4', 'c5'],\n                    'd':['d2', 'd3', 'd4', 'd5']},\n                    index=[2, 3, 4, 5])\nresult1 = pd.concat([df1, df2])\nprint(result1)\n#     a   b   c    d\n# 0  a0  b0  c0  NaN\n# 1  a1  b1  c1  NaN\n# 2  a2  b2  c2  NaN\n# 3  a3  b3  c3  NaN\n# 2  a2  b2  c2   d2\n# 3  a3  b3  c3   d3\n# 4  a4  b4  c4   d4\n# 5  a5  b5  c5   d5\n\nresult2 = pd.concat([df1, df2], axis=1, join='inner')\nprint(result2)\n#     a   b   c   a   b   c   d\n# 2  a2  b2  c2  a2  b2  c2  d2\n# 3  a3  b3  c3  a3  b3  c3  d3\n")),Object(i.b)("h3",{id:"4-2-\ub370\uc774\ud130\ud504\ub808\uc784-\ubcd1\ud569"},"4-2. \ub370\uc774\ud130\ud504\ub808\uc784 \ubcd1\ud569"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda \ub370\uc774\ud130\ud504\ub808\uc784 \ubcd1\ud569: pd.merge(df_left, df_right, how=, on=)")," "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"\ud83d\udcda IPython \ub514\uc2a4\ud50c\ub808\uc774 \uc124\uc815 \ubcc0\uacbd: pd.set_option(\uc635\uc158)"),"  "),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"\uc635\uc158"),Object(i.b)("th",{parentName:"tr",align:null},"\uc124\uba85"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"'display.max_columns', n"),Object(i.b)("td",{parentName:"tr",align:null},"\ucd9c\ub825\ud560 \ucd5c\ub300 \uc5f4\uc758 \uac1c\uc218")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"'display.max_colwidth', n"),Object(i.b)("td",{parentName:"tr",align:null},"\ucd9c\ub825\ud560 \uc5f4\uc758 \ub108\ube44")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"'display.unicode.east_asian_width', True"),Object(i.b)("td",{parentName:"tr",align:null},"\uc720\ub2c8\ucf54\ub4dc \uc0ac\uc6a9 \ub108\ube44 \uc870\uc815")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python",metastring:'title="\ub370\uc774\ud130\ud504\ub808\uc784 \ud569\uce58\uae30(merge)"',title:'"\ub370\uc774\ud130\ud504\ub808\uc784','\ud569\uce58\uae30(merge)"':!0},"print(df1)\n#        id    stock_name          value   price\n# 0  128940      \ud55c\ubbf8\uc57d\ud488   59385.666667  421000\n# 1  130960        CJ E&M   58540.666667   98900\n# 2  138250    \uc5d4\uc5d0\uc2a4\uc1fc\ud551   14558.666667   13200\n# 3  139480        \uc774\ub9c8\ud2b8  239230.833333  254500\n# 4  142280  \ub179\uc2ed\uc790\uc5e0\uc5d0\uc2a4     468.833333   10200\n# 5  145990        \uc0bc\uc591\uc0ac   82750.000000   82000\n# 6  185750        \uc885\uadfc\ub2f9   40293.666667  100500\n# 7  192400    \ucfe0\ucfe0\ud640\ub529\uc2a4  179204.666667  177500\n# 8  199800          \ud234\uc820   -2514.333333  115400\n# 9  204210  \ubaa8\ub450\ud22c\uc5b4\ub9ac\uce20    3093.333333    3475\n\nprint(df2)\n#        id              name           eps     bps        per       pbr\n# 0  130960            CJ E&M   6301.333333   54068  15.695091  1.829178\n# 1  136480              \ud558\ub9bc    274.166667    3551  11.489362  0.887074\n# 2  138040    \uba54\ub9ac\uce20\uae08\uc735\uc9c0\uc8fc   2122.333333   14894   6.313806  0.899691\n# 3  139480            \uc774\ub9c8\ud2b8  18268.166667  295780  13.931338  0.860437\n# 4  145990            \uc0bc\uc591\uc0ac   5741.000000  108090  14.283226  0.758627\n# 5  161390        \ud55c\uad6d\ud0c0\uc774\uc5b4   5648.500000   51341   7.453306  0.820007\n# 6  181710   NHN\uc5d4\ud130\ud14c\uc778\uba3c\ud2b8   2110.166667   78434  30.755864  0.827447\n# 7  185750            \uc885\uadfc\ub2f9   3990.333333   40684  25.185866  2.470259\n# 8  204210      \ubaa8\ub450\ud22c\uc5b4\ub9ac\uce20     85.166667    5335  40.802348  0.651359\n# 9  207940  \uc0bc\uc131\ubc14\uc774\uc624\ub85c\uc9c1\uc2a4   4644.166667   60099  89.790059  6.938551\n\nmerge_left = pd.merge(df1, df2, how='inner',\n                      left_on=['id', 'stock_name'],\n                      right_on=['id', 'name'])\nprint(merge_left)\n#        id    stock_name          value   ...     bps        per       pbr \n# 0  130960        CJ E&M   58540.666667   ...   54068  15.695091  1.829178\n# 1  139480        \uc774\ub9c8\ud2b8   239230.833333   ...  295780  13.931338  0.860437\n# 2  145990        \uc0bc\uc591\uc0ac    82750.000000   ...  108090  14.283226  0.758627\n# 3  185750        \uc885\uadfc\ub2f9    40293.666667   ...   40684  25.185866  2.470259\n# 4  204210  \ubaa8\ub450\ud22c\uc5b4\ub9ac\uce20     3093.333333   ...    5335  40.802348  0.651359 \n")))}d.isMDXComponent=!0}}]);